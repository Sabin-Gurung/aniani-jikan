{"version":3,"sources":["components/AnimeMini.js","components/AnimeDetail.js","App.js","serviceWorker.js","index.js"],"names":["AnimeMini","className","onClick","this","props","displayDetail","src","animeMini","image_url","alt","title","score","React","Component","axios","require","default","AnimeDetail","state","anime","get","animeId","then","res","data","setState","closeBtnHandler","synopsis","mal_id","type","source","episodes","genres","map","genre","name","producers","producer","premiered","trailer_url","App","animeResults","yearsOptions","noResults","searchOptions","year","Date","getFullYear","toString","season","animeDetailOptions","visible","onClickAnimeMini","id","onCloseAnimeDetail","onYearSeasonSearchHandler","onYearChange","event","val","target","value","onSeasonChange","years","i","push","header","searchSeasonSection","class","onChange","q","animeReasultsSection","key","animeDetailSection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3682d31.chunk.js","sourcesContent":["import React from \"react\"\nimport './AnimeMini.css'\n\nclass AnimeMini extends React.Component {\n    render() {\n        return (\n            <div className=\"anime-mini col-sm-4 col-md-3 col-lg-2 mt-3\" onClick={this.props.displayDetail}>\n                <img src={this.props.animeMini.image_url} alt=\"Card image cap\"></img>\n                <div>\n                    <p>{this.props.animeMini.title}</p>\n                    <p>{this.props.animeMini.score}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AnimeMini;","import React from \"react\";\n\nconst axios = require(\"axios\").default;\n\nclass AnimeDetail extends React.Component {\n    state = { anime: null };\n\n    componentDidMount() {\n        axios.get(`https://api.jikan.moe/v3/anime/${this.props.animeId}`)\n            .then(res => res.data)\n            .then(res => {\n                this.setState({ anime: res });\n            });\n    }\n\n    render() {\n        let anime = this.state.anime;\n\n        return (\n            <>\n                {\n                    anime ?\n                        (\n                            <>\n                            <div className=\"col-md-12 row\">\n                                <div className=\"col-md-4\">\n                                    <img src={anime.image_url}></img>\n                                </div>\n                                <div className=\"col-md-8\">\n                                    <button className=\"btn btn-success\" onClick={this.props.closeBtnHandler}>Back</button>\n                                    <h3>{anime.title}</h3>\n                                    <p>\n                                        {anime.synopsis}\n                                    </p>\n                                </div>\n                            </div>\n                            <div className=\"col-md-12\">\n                                <table className=\"table\">\n                                    <tbody>\n                                            <tr>\n                                                <th>MAL ID</th>\n                                                <td>{anime.mal_id}</td>\n                                            </tr>\n                                            <tr>\n                                                <th>Type</th>\n                                                <td>{anime.type}</td>\n                                            </tr>\n                                            <tr>\n                                                <th>Source</th>\n                                                <td>{anime.source}</td>\n                                            </tr>\n                                            <tr>\n                                                <th>Episodes</th>\n                                                <td>{anime.episodes}</td>\n                                            </tr>\n                                            <tr>\n                                                <th>Genres</th>\n                                                <td>\n                                                {\n                                                    anime.genres.map(genre=><span>{genre.name},</span>)\n                                                }\n                                                </td>\n                                            </tr>\n                                            <tr>\n                                                <th>Producers</th>\n                                                <td>\n                                                {\n                                                    anime.producers.map(producer=><span>{producer.name},</span>)\n                                                }\n                                                </td>\n                                            </tr>\n                                            <tr>\n                                                <th>Premiered</th>\n                                                <td>{anime.premiered}</td>\n                                            </tr>\n                                            <tr>\n                                                <th>Score</th>\n                                                <td>{anime.score}</td>\n                                            </tr>\n                                            <tr>\n                                                <th>Trailer</th>\n                                                <td>{\n                                                    anime.trailer_url ?\n                                                    (<iframe src={anime.trailer_url}/>)\n                                                    :\n                                                    (\"n/a\")\n                                                }</td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </>\n                        )\n                        :\n                        (<h1>Loading</h1>)\n                }\n            </>\n        );\n    }\n}\n\nexport default AnimeDetail;","import React from 'react';\n\nimport './App.css';\n\nconst axios = require(\"axios\").default;\nconst AnimeMini = require(\"./components/AnimeMini\").default;\nconst AnimeDetail = require(\"./components/AnimeDetail\").default;\n\n\nclass App extends React.Component {\n  state = {\n    animeResults: [],\n    yearsOptions: [],\n    noResults: true,\n    searchOptions: {\n      year: new Date().getFullYear().toString(),\n      season: \"summer\",\n    },\n    animeDetailOptions : {\n      animeId : null,\n      visible : false\n    }\n  }\n\n  onClickAnimeMini = (id)=>{\n    return  (()=>{\n      this.setState({animeDetailOptions : {animeId : id, visible : true}});\n    });\n  }\n\n  onCloseAnimeDetail = ()=>{\n    this.setState({animeDetailOptions : {animeId : null, visible : false}});\n  }\n\n  onYearSeasonSearchHandler = () => {\n    axios.get(`https://api.jikan.moe/v3/season/${this.state.searchOptions.year}/${this.state.searchOptions.season}`)\n      .then(res => res.data)\n      .then(res => {\n        this.setState({ animeResults: res.anime, noResults: false });\n      });\n  }\n\n  onYearChange = (event) => {\n    let val = event.target.value;\n    this.setState({ searchOptions: { year: val, season: this.state.searchOptions.season } });\n  }\n\n  onSeasonChange = (event) => {\n    let val = event.target.value;\n    this.setState({ searchOptions: { year: this.state.searchOptions.year, season: val } });\n  }\n\n  componentDidMount() {\n    let currentYear = new Date().getFullYear();\n    var years = [];\n    for (var i = currentYear; i >= 1950; --i) {\n      years.push(i);\n    }\n    this.setState({ yearsOptions: years });\n  }\n\n  render() {\n    let header = (\n      <div className=\"header row\">\n        AniANI-Jikan\n        </div>\n    );\n\n    let searchSeasonSection = (\n      <div className=\"row seasonSearchSection\">\n        <div class=\"input-group col-md-3\">\n          <div class=\"input-group-prepend\">\n            <span class=\"input-group-text\">Year</span>\n          </div>\n          <select class=\"form-control\" onChange={this.onYearChange}>\n            {\n              this.state.yearsOptions.map(q => <option>{q}</option>)\n            }\n          </select>\n        </div>\n        <div class=\"input-group col-md-3\">\n          <div class=\"input-group-prepend\">\n            <span class=\"input-group-text\">Season</span>\n          </div>\n          <select class=\"form-control\" onChange={this.onSeasonChange}>\n            <option value=\"summer\">summer</option>\n            <option value=\"winter\">winter</option>\n            <option value=\"fall\">fall</option>\n            <option value=\"spring\">spring</option>\n          </select>\n        </div>\n        <div className=\"go-btn col-md-3\">\n          <button className=\"btn btn-success\" onClick={this.onYearSeasonSearchHandler}>Search</button>\n        </div>\n      </div>\n    );\n\n    let animeReasultsSection = (\n        <div className=\"anime-results row\">\n          {\n            this.state.noResults ?\n              (<div className=\"col-md-12 alert alert-danger\">\n                NO anime results.\n            </div>)\n              :\n              this.state.animeResults.map(animeMini => <AnimeMini key={animeMini.mal_id} animeMini={animeMini} displayDetail={this.onClickAnimeMini(animeMini.mal_id)} />)\n          }\n        </div>\n    );\n\n    let animeDetailSection = (\n      <div className=\"anime-detail-section row\">\n      <AnimeDetail animeId={this.state.animeDetailOptions.animeId} closeBtnHandler={this.onCloseAnimeDetail}></AnimeDetail>\n      </div>\n    );\n\n    return (\n      <div className=\"app-wrapper container\">\n        {header}\n        {\n          this.state.animeDetailOptions.visible ?\n          null : \n          searchSeasonSection\n        }\n        {\n          this.state.animeDetailOptions.visible ?\n          animeDetailSection : \n          animeReasultsSection\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}